#!/usr/bin/env python

import sys
import re
import os
import subprocess
import time

QUEUE = 3
EVENT = 4

libs = []
maps = []
maps2 = []

addresses = []
addr2lines = []


def parse_range(astr):
    result = set()
    for part in astr.split(','):
        x = part.split('-')
        result.update(range(int(x[0]), int(x[-1]) + 1))
    return sorted(result)


def getlibandaddr2line(address):

   result = 'lib?|function?'
   for map in maps:
      maparea = (re.search(r'[0-9a-f]+-[0-9a-f]+', map)).group()
      mapareas = maparea.split('-')

      if int(address, 16) >= int(mapareas[0], 16) and int(address, 16) < int(mapareas[1], 16):

         for lib in libs:

            if os.path.basename(map.split()[5]) in lib:
               if 'shared object' in subprocess.check_output('file ' + lib, shell = True):

                  cmd = 'addr2line -s -f -p -C' + ' -e ' + lib + ' -a ' + hex(int(address, 16) - int(mapareas[0], 16))
                  #sys.stderr.write('cmd=%s\n' % cmd)

                  addr2line = subprocess.check_output(cmd, shell = True).replace('\n', '').split(': ')[1]

                  thelib = os.path.basename(map.split()[5])
                  thefullfunc = addr2line.split(' at ')[0].replace(' ', '-')
                  thefuncname = thefullfunc.split('(')[0]

                  #sys.stderr.write('thefuncname=%s\n' % thefuncname)

                  result = thefuncname
                  break
         break

   return result

def sortby(x):
   return len(x.split()[0]), x.split()[0].lower(), int(x.split()[1][1:])

def main():

   if len(sys.argv) >= 4:

      #build libs
      for root, dirs, files in os.walk(sys.argv[3]):
         for file in files:
            if '.so' in file:
               libs.append(root + '/' + file)
      sys.stderr.write('libs done\n')

      #build maps
      #74955000-7495c000 rw-p 00151000 00:10 56755590   /usr/lib/libQt5Network.so.5.3.2
      f = open(sys.argv[2])
      for line in f:
         if '.so' in line:
            maps.append(line)
      f.close()
      sys.stderr.write('maps done\n')
      #for m in maps:
      #   sys.stderr.write('maps=[%s]\n' %m)

      f = open(sys.argv[1])

      #build maps2
      #DSC 0 0 MAPS,741b1000-74213000,r-xp,00000000,00:10,56754894,,,/lib/libuClibc-0.9.32.1.so
      for line in f:
         if 'DSC 0 0 MAPS' in line:
            if line[13:].replace(',',' ') not in maps:
               maps2.append(line[13:].replace(',',' '))
      sys.stderr.write('maps2 done\n')

      #for m in maps2:
      #   sys.stderr.write('maps2=[%s]\n' %m)


      f.seek(0)
      for line in f:

         if line.startswith('DSC'):

            result = re.search(r'ra=[0-9a-f]+', line)
            if result:

               address = (result.group().split(',')[0])[3:]
               if not address in addresses:
                  addresses.append(address)
                  addr2line = getlibandaddr2line(address)
                  addr2lines.append(addr2line)

               theaddr2line = addr2lines[addresses.index(address)]

               #sys.stderr.write('%s\n' %theaddr2line)

               line = line[0:8] + theaddr2line + ':' + line[8:]


         print line,

   else:

      print("Usage: %s tdifile mapsfile pathtorootfs" % sys.argv[0])

if __name__ == "__main__":
   main()
