#!/usr/bin/env python

import sys
import re
import os
import subprocess

libs = []
maps = []
addresses = []
tags = []
addresscounts = []
results = []

def getlib(address, tag):

   if not address in addresses:
      addresses.append(address)
      addresscounts.append(1)
      tags.append(tag)

      print tag

      result = 'lib not found'
      for map in maps:
         maparea = (re.search(r'[0-9a-f]+-[0-9a-f]+', map)).group()
         mapareas = maparea.split('-')

         if int(address, 16) >= int(mapareas[0], 16) and int(address, 16) < int(mapareas[1], 16) :
            #results.append(address + ', ' + map)

            for lib in libs:
               if os.path.basename(map.split()[5]) in lib:
                  
                  cmd = 'addr2line -s -f -p -C' + ' -e ' + lib + ' -a ' + hex(int(address, 16) - int(mapareas[0], 16))
                  result = subprocess.check_output(cmd, shell = True).replace('\n', ' ')

            break

      results.append(address + ', ' + os.path.basename(map.split()[5]) + ', ' + result)

      #print 'result=', result

   else:
      addresscounts[addresses.index(address)] += 1


def sortby(x):
    try:
        #return int(x.split(',')[1], 16)
        return x.split(' ')[0],
    except ValueError:
        return float('inf')

def main():

   if len(sys.argv) >= 4:

      for root, dirs, files in os.walk(sys.argv[3]):
         for file in files:
            if '.so' in file:
               libs.append(root + '/' + file)

      f = open(sys.argv[2])
      for line in f:
         maps.append(line)
      f.close()

      f = open(sys.argv[1])

      if len(sys.argv) == 5:
         time = False
      else:
         time = True

      for line in f:

         if time == False:
            if line.startswith('OCC'):
               if int(line.split()[3]) > int(sys.argv[4]) * 1000000000:
                  time = True

         else:
            if line.startswith('DSC'):
               result = re.search(r'(f|m,[0-9]+|r,[0-9]+|c,[0-9]+),ra=[0-9a-f]+$', line)
               if result:
                  getlib((re.search(r'[0-9a-f]+$', line)).group(), result.group())

      f.close()

      i = 0
      for item in results:
         results[i] = "%s, #%6d, %25s, %s" % (tags[i] , addresscounts[i], results[i].split(',')[1], results[i].split(',')[2])
         i+= 1

      results.sort(key = sortby)

      for result in results:
         print result

   else:

      print("Usage: %s tdifile mapsfile pathtorootfs [from-seconds]" % sys.argv[0])

if __name__ == "__main__":
   main()
