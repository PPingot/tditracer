#!/usr/bin/env python

import sys
import re
from datetime import datetime
import csv


TASKS  = 0
QUEUES = 3
EVENTS = 4
NOTES  = 7


tasksnames = []
queuesnames = []
eventsnames = []
notesnames = []

offset_nsec = 0
first_tstamp = 0

nams = []  # tdifilename  + ' ' + 0 / 3 / 4 / 7 + ' ' + 0.. / 3000.. / 4000.. / 7000..
evts = []  # epoch-tstamp + ' ' + 0 / 3 / 4 / 7 + ' ' + thenam + ' ' + 'OCC/STA/STO/' + ' ' + 0.. / 3000.. / 4000.. / 7000.. + ' ' + descr


def build(tdifilename):

   global nams
   global evts
   global first_tstamp

   f = open(tdifilename)

   for line in f:
      if line.startswith('END'):
         offset = int(line[4:])


   f.seek(0)

   for line in f:

      if line.startswith('NAM'):

         namwords = line.split()

         nams.append(tdifilename + ' ' + namwords[2] + ' ' + namwords[3])


      if line.startswith('OCC'):

         occwords = line.split()

         tstamp = int(occwords[3])

         if first_tstamp == 0:
            first_tstamp = tstamp


         dscwords = f.next().split()


         for nam in nams:
            namwords = nam.split()

            if namwords[0] == tdifilename:

               if occwords[2] == namwords[1]:

                  thenam = namwords[2]

         evts.append(str(offset + tstamp) + ' ' + occwords[1] + ' ' + 'OCC' + ' ' +  thenam + ' ' + dscwords[3])


      if line.startswith('STA'):

         stawords = line.split()

         tstamp = int(stawords[3])

         if first_tstamp == 0:
            first_tstamp = tstamp


         if int(stawords[1]) == 0: # @T+ STA DSC

            dscwords = f.next().split()

            for nam in nams:
               namwords = nam.split()

               if namwords[0] == tdifilename:

                  if stawords[2] == namwords[1]:

                     thenam = namwords[2]

            evts.append(str(offset + tstamp) + ' ' + stawords[1] + ' ' + 'STA' + ' ' + thenam + ' ' + dscwords[3])


         if int(stawords[1]) == 4: # @E+  STA STO DSC

            stowords = f.next().split()

            dscwords = f.next().split()

            for nam in nams:
               namwords = nam.split()

               if namwords[0] == tdifilename:

                  if stawords[2] == namwords[1]:

                     thenam = namwords[2]

            evts.append(str(offset + tstamp) + ' ' + stawords[1] + ' ' + 'STASTO' + ' ' + thenam + ' ' + dscwords[3])


         if int(stawords[1]) == 3: # ~ STA / STO

            for nam in nams:
               namwords = nam.split()
            
               if namwords[0] == tdifilename:
            
                  if stawords[2] == namwords[1]:
            
                     thenam = namwords[2]

            evts.append(str(offset + tstamp) + ' ' + stawords[1] + ' ' + stawords[0] + ' ' + thenam + ' ' + stawords[4])



      if line.startswith('STO'):

         stowords = line.split()

         tstamp = int(stowords[3])

         if first_tstamp == 0:
            first_tstamp = tstamp


         if int(stowords[1]) == 0: # @T+ STO DSC

            dscwords = f.next().split()

            for nam in nams:
               namwords = nam.split()

               if namwords[0] == tdifilename:

                  if stowords[2] == namwords[1]:

                     thenam = namwords[2]

            evts.append(str(offset + tstamp) + ' ' + stowords[1] + ' ' + 'STO' + ' ' + thenam + ' ' + dscwords[3])


         if int(stowords[1]) == 3: # ~ STA / STO

            for nam in nams:
               namwords = nam.split()

               if namwords[0] == tdifilename:

                  if stowords[2] == namwords[1]:
            
                     thenam = namwords[2]
            
            evts.append(str(offset + tstamp) + ' ' + stowords[1] + ' ' + stowords[0] + ' ' + thenam + ' ' + stowords[4])


   #for evt in evts:
   #   sys.stderr.write(evt[:120] + '\n')

   f.close()


def main():

   if len(sys.argv) >= 2:

      for tdifilename in sys.argv[1:]:

         build(tdifilename)


      match1 = 'pbPostInputKeyEvent'
      match2 = 'vlhal_view_MuteAudio'

      prog1 = re.compile('.*' + match1 + '.*')
      prog2 = re.compile('.*' + match2 + '.*')

      state = 'NONE_FOUND'

      curr_evtwords = []

      out = csv.writer(open("myfile.csv","w"), delimiter=',', quoting=csv.QUOTE_ALL)

      for evt in evts:

         #sys.stderr.write(evt[:130] + '\n')

         #1438899095850210044 0 STA [mwserver][1711][0]poll() [mwserver][1711][0]poll(),7f4090,2

         evtwords = evt.split()

         if state == 'NONE_FOUND':

            if (prog1.match(evtwords[3]) and (evtwords[2] == 'STA')):
               curr_evtwords.append(0)
               curr_evtwords.append(match1)
               tstamp_begin = int(evtwords[0])
               state = '1_FOUND'

         elif state == '1_FOUND':

            if (prog1.match(evtwords[3]) and (evtwords[2] == 'STA')):
               curr_evtwords.append((int(evtwords[0]) - tstamp_begin) / 1000000000.0 ) 
               curr_evtwords.append(match1)
               state = '1_FOUND'

            elif (prog2.match(evtwords[3]) and (evtwords[2] == 'STA')):
               curr_evtwords.append((int(evtwords[0]) - tstamp_begin) / 1000000000.0 ) 
               curr_evtwords.append(match2)
               tstamp_end = int(evtwords[0])
               state = '2_FOUND'

         elif state == '2_FOUND':

            if (prog1.match(evtwords[3]) and (evtwords[2] == 'STA')):

               delta = tstamp_end - tstamp_begin

               print(delta)
               print(curr_evtwords)

               out.writerow(curr_evtwords)

               curr_evtwords = []
               curr_evtwords.append(0)
               curr_evtwords.append(match1)
               tstamp_begin = int(evtwords[0])

               state = '1_FOUND'

            elif (prog2.match(evtwords[3]) and (evtwords[2] == 'STA')):
               tstamp_end = int(evtwords[0])
               curr_evtwords.append((int(evtwords[0]) - tstamp_begin) / 1000000000.0 ) 
               curr_evtwords.append(match2)
               state == '2_FOUND'

   else:

      print("Usage: %s tdifile pattern1 pattern2" % sys.argv[0])


if __name__ == "__main__":
   main()
