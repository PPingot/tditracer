#!/usr/bin/env python

import sys
import re
from datetime import datetime

SEMA = 2
EVENT = 4
NOTE = 7

names = []
offset_sec = 0
offset_nsec = 0

prev_stamp = 0

def addnes (type, logfilename, logline, matches):

   global prev_stamp

   global names
   global offset_sec
   global offset_nsec

   for match in matches:
      #sys.stderr.write('match:\'%s\'\n' % match)
      prog = re.compile('.*' + match + '.*')
      if prog.match(logline):
         name = match;

   if name:
      if name not in names:
         names.append(name)
         print('NAM %d %d %s' %(type, (type * 1000 + names.index(name)), '[' + logfilename + ']' + name.replace(' ', '_')))

      #attempt to detect multiple timestamp formats

      #150610-22:42:34.855932
      tstamp = re.findall("\d{6}-\d{2}:\d{2}:\d{2}\.\d+", logline)
      if tstamp:
         if tstamp[0]:
            t = datetime.strptime(tstamp[0], '%y%m%d-%H:%M:%S.%f')
            sec = int((t - datetime(1970, 1, 1)).total_seconds())
            nsec = int(t.microsecond * 1000)
            stamp = long(sec * 1000000000 + nsec);

      else:
         #20150610 22:41:36.082
         tstamp = re.findall("\d{8} \d{2}:\d{2}:\d{2}\.\d+", logline)
         if tstamp:
            if tstamp[0]:
               t = datetime.strptime(tstamp[0], '%Y%m%d %H:%M:%S.%f')
               sec = int((t - datetime(1970, 1, 1)).total_seconds())
               nsec = int(t.microsecond * 1000)
               stamp = long(sec * 1000000000 + nsec);

         else:
            #2015-06-10T20:04:27.941
            tstamp = re.findall("\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+", logline)
            if tstamp:
               if tstamp[0]:
                  t = datetime.strptime(tstamp[0], '%Y-%m-%dT%H:%M:%S.%f')
                  sec = int((t - datetime(1970, 1, 1)).total_seconds())
                  nsec = int(t.microsecond * 1000)
                  stamp = long(sec * 1000000000 + nsec);

            else:
               # 1434754719      168720
               tstamp = re.findall("\d{8,}\s*\d+", logline)
               if tstamp:
                  if tstamp[0]:
                     pat = re.compile("\s*")
                     fields = pat.split(tstamp[0])
                     sec = int(fields[0])
                     nsec = int(fields[1]) * 1000
                     stamp = long(sec * 1000000000 + nsec);
                     #sys.stderr.write('sec %d nsec %d \n' % (sec, nsec))

      if (tstamp):
         if (offset_sec == 0):
            offset_sec = sec;
            offset_nsec = nsec;

         if prev_stamp:
            if stamp < prev_stamp:
               sys.stderr.write('stamp < prev_stamp\n')

         prev_stamp = stamp

         print('OCC %d %d %d' %(type, (type * 1000 + names.index(name)), (sec * 1000000000 + nsec) - (offset_sec * 1000000000 + offset_nsec)))
         print('DSC 0 0 %s' % logline.replace(" ", "_").replace("\t", "_"))

      else:
         sys.stderr.write('no timestamp found, skipping logline: \'%s\'\n' % logline)


def main():

   if len(sys.argv) >= 2:

      i = 1;
      type = SEMA;
      if (sys.argv[1] == '-n'):
         i = 2;
         type = NOTE;
      elif (sys.argv[1] == '-e'):
         i = 2;
         type = EVENT;
      elif (sys.argv[1] == '-s'):
         i = 2;
         type = SEMA;

      matches = []
      if len(sys.argv) == i + 1:
         matches = ['.+']
         totalmatch = '.+'
      else:
         for arg in sys.argv[(i + 1):]:
            matches.append(arg)

         totalmatch = ''
         for match in matches:
            totalmatch = totalmatch + '.*' + match + '.*|'

         totalmatch = totalmatch[:-1]

      #sys.stderr.write('totalmatch:\'%s\'\n' % totalmatch)
      
      loglinematches = []

      f = open(sys.argv[i])
      for line in f:
         m = re.match(totalmatch, line)
         if m:
            loglinematches.append(m.group())

      f.close()

      print('TIME 1000000000')
      print('SPEED 1000000000')

      for logline in loglinematches:

         #sys.stderr.write('logline is \'%s\'\n' % logline)
         addnes(type, sys.argv[i], logline, matches)

      print('END %d' % (offset_sec * 1000000000 + offset_nsec));

   else:

      print("Usage: %s [-n] [-e] [-s] logfile [regexp1] [regexp2]..." % sys.argv[0])

if __name__ == "__main__":
   main()